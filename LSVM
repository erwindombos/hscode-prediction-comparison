# Step 1: Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from tqdm import tqdm
import joblib

# Step 2: Load the dataset
file_path = '/content/dataset_pib_cleaned.txt'
df = pd.read_csv(file_path, dtype=str)

# Remove classes with less than 4 samples
class_counts = df['HS_CODE'].value_counts()
classes_to_keep = class_counts[class_counts >= 4].index
df = df[df['HS_CODE'].isin(classes_to_keep)]

# Step 3: Prepare the data
X = df['URAIAN']
y = df['HS_CODE']

# Step 4: Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Vectorize the text data using TF-IDF with limited features
vectorizer = TfidfVectorizer(max_features=5000)  # Limit features
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Step 6: Initialize and train the SGD Classifier
sgd_model = SGDClassifier(random_state=42)

print("Training the model...")
sgd_model.fit(X_train_tfidf, y_train)

# Step 7: Make predictions
y_pred = sgd_model.predict(X_test_tfidf)

# Step 8: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")

# Optional: Save the model and vectorizer
joblib.dump(sgd_model, 'sgd_model.pkl')
joblib.dump(vectorizer, 'vectorizer.pkl')
