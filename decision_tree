import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import re

# Step 1: Load and preprocess the data
# Read the txt file
df = pd.read_csv('dataset_pib_cleaned.txt', dtype='str')

# Remove classes with less than 10 samples
class_counts = df['HS_CODE'].value_counts()
classes_to_keep = class_counts[class_counts >= 10].index
df = df[df['HS_CODE'].isin(classes_to_keep)]

# Step 2: Text preprocessing function
def preprocess_text(text):
    # Convert to lowercase
    text = str(text).lower()
    # Remove special characters and digits
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    # Remove extra whitespace
    text = ' '.join(text.split())
    return text

# Apply preprocessing to URAIAN column
df['URAIAN_cleaned'] = df['URAIAN'].apply(preprocess_text)

# Step 3: Split the data into features (X) and target (y)
X = df['URAIAN_cleaned']
y = df['HS_CODE']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Step 4: Tokenization and feature extraction using TF-IDF
vectorizer = TfidfVectorizer(max_features=5000)
X_train_vectorized = vectorizer.fit_transform(X_train)
X_test_vectorized = vectorizer.transform(X_test)

# Step 5: Train the Decision Tree model
dt_classifier = DecisionTreeClassifier(random_state=42)
dt_classifier.fit(X_train_vectorized, y_train)

# Step 6: Make predictions
y_pred = dt_classifier.predict(X_test_vectorized)

# Step 7: Evaluate the model
def evaluate_model(y_true, y_pred):
    # Calculate metrics
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred, average='weighted')
    recall = recall_score(y_true, y_pred, average='weighted')
    f1 = f1_score(y_true, y_pred, average='weighted')

    # Print results
    print("Model Evaluation Metrics:")
    print(f"Accuracy: {accuracy:.4f}")
    print(f"Precision: {precision:.4f}")
    print(f"Recall: {recall:.4f}")
    print(f"F1 Score: {f1:.4f}")

    return accuracy, precision, recall, f1

# Evaluate the model
metrics = evaluate_model(y_test, y_pred)

# Step 8: Function to predict new descriptions
def predict_hs_code(description):
    # Preprocess the new description
    cleaned_description = preprocess_text(description)
    # Vectorize the description
    vectorized_description = vectorizer.transform([cleaned_description])
    # Make prediction
    prediction = dt_classifier.predict(vectorized_description)
    return prediction[0](citation_0)

# Example usage:
# sample_description = "Your commodity description here"
# predicted_hs_code = predict_hs_code(sample_description)
# print(f"Predicted HS Code: {predicted_hs_code}")
